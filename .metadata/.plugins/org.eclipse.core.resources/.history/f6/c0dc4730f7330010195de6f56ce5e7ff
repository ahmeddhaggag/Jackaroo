package controller;

import engine.Game;
import engine.board.Cell;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import view.CardView;
import view.CellView;
import view.SideCardView;
import view.TopCardView;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import model.card.Card;

public class MainGameController {

	@FXML private Label nameLabel1;
	@FXML private Label nameLabel2;
	@FXML private Label nameLabel3;
	@FXML private Label nameLabel4;

	@FXML private Pane boardPane;

	@FXML private Pane boardTrackPane;
	@FXML private HBox playerBox;
	@FXML private VBox CPU1Box;
	@FXML private HBox CPU2Box;
	@FXML private VBox CPU3Box;

	private List<Pane> trackPanes = new ArrayList<>();

	
	private StackPane cards=new StackPane();

	private Game game;

	public void startGame(String username) throws IOException {
		game = new Game(username);

		displayName(nameLabel1, username);
		displayName(nameLabel2, "CPU1");
		displayName(nameLabel3, "CPU2");
		displayName(nameLabel4, "CPU3");

		initializeBoard();
		
		displayCards();
//		while(game.checkWin() != null){
//		displayCards();
//		
//		
//		
//		
//		}
		
		
	}

	private void displayName(Label label, String name) {
		label.setText(name);
	}

	@FXML
	public void initialize() {
		// Dynamically get all 100 panes by ID
		for (int i = 0; i < 100; i++) {
			Pane pane = (Pane) boardTrackPane.lookup("#cellPane_" + i);
			if (pane != null) {
				trackPanes.add(pane);
			} else {
				System.err.println("Missing: cellPane_" + i);
			}
		}
	}

	public void initializeBoard() {
		List<Cell> cells = game.getBoard().getTrack(); // Assuming 100 cells

		for (int i = 0; i < 100; i++) {
			CellView cellView = new CellView(cells.get(i));
			Pane cellPane = trackPanes.get(i);
			cellPane.getChildren().clear();
			cellPane.getChildren().add(cellView);
		}
	}
	
	public void displayCards(){


		for(Card card : this.game.getPlayers().get(0).getHand() ){
			CardView cardView = new CardView(card);
			playerBox.getChildren().add(cardView);
		}
		for(Card card : this.game.getPlayers().get(1).getHand() ){
			CardView cardView = new CardView(card);
			CPU1Box.getChildren().add(cardView);
		}
		for(Card card : this.game.getPlayers().get(2).getHand() ){
			CardView cardView = new CardView(card);
			CPU2Box.getChildren().add(cardView);
		}
		for(Card card : this.game.getPlayers().get(3).getHand() ){
			CardView cardView = new CardView(card);
			CPU3Box.getChildren().add(cardView);
		}
//		for(int i=0;i<=3;i++)
//		{
//			Card playerCard=this.game.getPlayers().get(0).getHand().get(i);
//			CardView p=new CardView(playerCard);
//			Card cpu1=this.game.getPlayers().get(1).getHand().get(i);
//			SideCardView c1=new SideCardView(cpu1);
//			Card cpu2=this.game.getPlayers().get(2).getHand().get(i);
//			TopCardView c2=new TopCardView(cpu2);
//			Card cpu3=this.game.getPlayers().get(3).getHand().get(i);
//			SideCardView c3=new SideCardView(cpu3);
//			playerbox.getChildren().add(p);
//			CPU1box.getChildren().add(c1);
//			CPU2box.getChildren().add(c2);
//			CPU3box.getChildren().add(c3);
//		}
//		StackPane.setAlignment(playerbox, javafx.geometry.Pos.BOTTOM_CENTER);
//		StackPane.setAlignment(CPU1box, javafx.geometry.Pos.CENTER_RIGHT);
//		StackPane.setAlignment(CPU2box, javafx.geometry.Pos.TOP_CENTER);
//		StackPane.setAlignment(CPU3box, javafx.geometry.Pos.CENTER_LEFT);

	}

}
