package controller;

import engine.Game;
import engine.board.Cell;
import engine.board.CellType;
import engine.board.SafeZone;
import exception.*;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Label;
import javafx.scene.layout.*;
import model.card.Card;
import model.player.Marble;
import view.*;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class MainGameController {

	@FXML private Label nameLabel1, nameLabel2, nameLabel3, nameLabel4;
	@FXML private Pane PlayerPane1, PlayerPane2, PlayerPane3, PlayerPane4;
	@FXML private GridPane board, PlayerHomeZone, CPU1HomeZone, CPU2HomeZone, CPU3HomeZone;
	@FXML private Pane boardPane, boardTrackPane, firePitArea;
	@FXML private HBox playerBox, CPU2Box;
	@FXML private VBox CPU1Box, CPU3Box;

	private final List<Pane> trackPanes = new ArrayList<>();
	private final List<Pane> safePanes1 = new ArrayList<>();
	private final List<Pane> safePanes2 = new ArrayList<>();
	private final List<Pane> safePanes3 = new ArrayList<>();
	private final List<Pane> safePanes4 = new ArrayList<>();
	private final List<Pane> HomeZonePanes1 = new ArrayList<>();
	private final List<Pane> HomeZonePanes2 = new ArrayList<>();
	private final List<Pane> HomeZonePanes3 = new ArrayList<>();
	private final List<Pane> HomeZonePanes4 = new ArrayList<>();
	private static final ArrayList<Marble> selectedMarbles = new ArrayList<>();

	private Game game;
	private Card selectedCard;

	public void startGame(String username) throws IOException, GameException {
		game = new Game(username);

		displayName(nameLabel1, username);
		displayName(nameLabel2, "CPU1");
		displayName(nameLabel3, "CPU2");
		displayName(nameLabel4, "CPU3");

		PlayerPane1.setStyle("-fx-background-color: " + game.getPlayers().get(0).getColour().name().toLowerCase() + ";");
		PlayerPane2.setStyle("-fx-background-color: " + game.getPlayers().get(1).getColour().name().toLowerCase() + ";");
		PlayerPane3.setStyle("-fx-background-color: " + game.getPlayers().get(2).getColour().name().toLowerCase() + ";");
		PlayerPane4.setStyle("-fx-background-color: " + game.getPlayers().get(3).getColour().name().toLowerCase() + ";");

		updateBoard();
		displayCards();
		displayHomeZones();

		while(game.checkWin()!= null){
			if(game.getActivePlayerColour() == game.getPlayers().get(0).getColour()){
				while(selectedCard == null);
			}
			if(game.canPlayTurn()){
				game.playPlayerTurn();
				game.endPlayerTurn();
			}


		}
	}

	private void displayName(Label label, String name) {
		label.setText(name);
	}

	@FXML
	public void initialize() {
		for (int i = 0; i < 100; i++) addPaneToList(board, trackPanes, "#cellPane_" + i);
		for (int i = 0; i < 4; i++) {
			addPaneToList(board, safePanes1, "#safePane1_" + i);
			addPaneToList(board, safePanes2, "#safePane2_" + i);
			addPaneToList(board, safePanes3, "#safePane3_" + i);
			addPaneToList(board, safePanes4, "#safePane4_" + i);
		}
		for (int i = 1; i <= 4; i++) {
			addPaneToList(PlayerHomeZone, HomeZonePanes1, "#HomeZonePane1_" + i);
			addPaneToList(CPU1HomeZone, HomeZonePanes2, "#HomeZonePane2_" + i);
			addPaneToList(CPU2HomeZone, HomeZonePanes3, "#HomeZonePane3_" + i);
			addPaneToList(CPU3HomeZone, HomeZonePanes4, "#HomeZonePane4_" + i);
		}
	}

	private void addPaneToList(GridPane grid, List<Pane> list, String id) {
		Pane pane = (Pane) grid.lookup(id);
		if (pane != null) list.add(pane);
		else System.err.println("Missing: " + id);
	}

	public void updateBoard() {
		List<Cell> cells = game.getBoard().getTrack();
		List<SafeZone> safe = game.getBoard().getSafeZones();

		for (int i = 0; i < 100; i++) updateCellView(trackPanes.get(i), new CellView(cells.get(i)));
		for (int i = 0; i < 4; i++) {
			updateCellView(safePanes1.get(i), new SafeZoneView(safe.get(0)));
			updateCellView(safePanes2.get(i), new SafeZoneView(safe.get(1)));
			updateCellView(safePanes3.get(i), new SafeZoneView(safe.get(2)));
			updateCellView(safePanes4.get(i), new SafeZoneView(safe.get(3)));
		}

		updateHomeZone(HomeZonePanes1, 0);
		updateHomeZone(HomeZonePanes2, 1);
		updateHomeZone(HomeZonePanes3, 2);
		updateHomeZone(HomeZonePanes4, 3);
	}

	private void updateCellView(Pane pane, Region view) {
		pane.getChildren().clear();
		pane.getChildren().add(view);
	}

	private void updateHomeZone(List<Pane> panes, int playerIndex) {
		for (int i = 0; i < 4; i++) {
			Cell cell = new Cell(CellType.NORMAL);
			if (i < game.getPlayers().get(playerIndex).getMarbles().size()) {
				cell.setMarble(game.getPlayers().get(playerIndex).getMarbles().get(i));
			}
			CellView cellView = new CellView(cell);
			updateCellView(panes.get(i), cellView);
		}
	}

	public void displayHomeZones() {
		PlayerHomeZone = new HomeZoneView(game.getPlayers().get(0));
		CPU1HomeZone = new HomeZoneView(game.getPlayers().get(1));
		CPU2HomeZone = new HomeZoneView(game.getPlayers().get(2));
		CPU3HomeZone = new HomeZoneView(game.getPlayers().get(3));
	}

	public void displayCards() {
		playerBox.getChildren().clear();
		CPU1Box.getChildren().clear();
		CPU2Box.getChildren().clear();
		CPU3Box.getChildren().clear();

		displayPlayerCards(game.getPlayers().get(0).getHand(), playerBox, 0);
		displayPlayerCards(game.getPlayers().get(1).getHand(), CPU1Box, 270);
		displayPlayerCards(game.getPlayers().get(2).getHand(), CPU2Box, 180);
		displayPlayerCards(game.getPlayers().get(3).getHand(), CPU3Box, 90);

		playerBox.setSpacing(10);
		CPU2Box.setSpacing(10);

		StackPane.setAlignment(playerBox, javafx.geometry.Pos.BOTTOM_CENTER);
		StackPane.setAlignment(CPU1Box, javafx.geometry.Pos.CENTER_RIGHT);
		StackPane.setAlignment(CPU2Box, javafx.geometry.Pos.TOP_CENTER);
		StackPane.setAlignment(CPU3Box, javafx.geometry.Pos.CENTER_LEFT);
	}

	private void displayPlayerCards(List<Card> cards, Pane box, int rotation) {
		for (Card card : cards) {
			CardView cardView = new CardView(card, rotation == 0, this);
			cardView.setRotate(rotation);
			cardView.setOnMouseClicked(event -> handleCardClick(card));
			box.getChildren().add(cardView);
		}
	}

	public void displayFirePit(Card card) {
		firePitArea.getChildren().clear();
		firePitArea.getChildren().add(new FirePitView(card));
	}

	public void cardAction(Card card) {
		selectedCard = card;
		handleCardClick(card);
		displayFirePit(card);
	}

	public void handleCardClick(Card card) {
		try {
			card.act(selectedMarbles);
		} catch (GameException e) {
			showAlert("Invalid Action", e.getMessage());
		}
	}

	private void showAlert(String title, String content) {
		Alert alert = new Alert(Alert.AlertType.ERROR);
		alert.setTitle(title);
		alert.setHeaderText(null);
		alert.setContentText(content);
		alert.showAndWait();
	}

	public static void addMarble(Marble marble) {
		selectedMarbles.add(marble);
	}
}