package engine.board;
import java.util.*;

import engine.GameManager;
import exception.*;
import model.Colour;
import model.player.Marble;

import java.util.ArrayList;
import java.util.Random;

import engine.GameManager;

public class Board implements BoardManager {
	private final GameManager gameManager;
	private final ArrayList<Cell> track;
	private final ArrayList<SafeZone> safeZones;
	private int splitDistance;


	public Board(ArrayList<Colour> colourOrder, GameManager gameManager){
		this.gameManager = gameManager;
		this.track = new ArrayList<Cell>(100);
		this.safeZones = new ArrayList<SafeZone>(4);
		for(int i =0; i<100; i++){
			if( i==0 || i == 25 || i== 50 || i == 75){
				track.add(new Cell(CellType.BASE));
			}else if( i == 23 || i == 48 || i == 73 || i == 98){
				track.add(new Cell(CellType.ENTRY));
			}else {
				track.add(new Cell(CellType.NORMAL));
			}
		}
		splitDistance = 3;
		safeZones.add(new SafeZone(colourOrder.get(0)));
		safeZones.add(new SafeZone(colourOrder.get(1)));
		safeZones.add(new SafeZone(colourOrder.get(2)));
		safeZones.add(new SafeZone(colourOrder.get(3)));
		for(int i =0; i<8; i++){
			assignTrapCell();
		}

	}


	private void assignTrapCell(){
		Random rand = new Random();
		int index;

		while(true){
			index = rand.nextInt(100);
			if(!track.get(index).isTrap() && track.get(index).getCellType() == CellType.NORMAL){
				track.get(index).setTrap(true);
				break;
			}

		}

	}


	private ArrayList<Cell> getSafeZone(Colour colour){
		ArrayList<Cell> arr = null;
		for(int i =0; i<4; i++){
			if(safeZones.get(i).getColour() == colour ){
				arr = safeZones.get(i).getCells();
				break;
			}
		}
		return arr;

	}

	private int getPositionInPath(ArrayList<Cell> path, Marble marble){
		int result = -1;
		if(path != null){
			for(int i =0; i<path.size(); i++){
				if(path.get(i).getMarble() == marble){
					result = i;
					break;
				}
			}
		}

		return result;
	}

	private int getBasePosition(Colour colour){
		int result = -1;
		for(int i =0; i<4; i++){
			if(safeZones.get(i).getColour() == colour){
				result =  25*i;
				break;
			}
		}


		return result;
	}

	private int getEntryPosition(Colour colour){
		int result = -1;
		for(int i = 0; i < 4; i++){
			if(safeZones.get(i).getColour() == colour){
				result = 25 * i - 2; 

				if (result < 0) {
					result += 100; 
				}
				break;
			}
		}
		return result;
	}




	private ArrayList<Cell> validateSteps(Marble marble, int steps) throws IllegalMovementException {
		ArrayList<Cell> path = new ArrayList<>();
		int pos = getPositionInPath(track, marble);
		boolean enteredSafeZone = false;
		int zoneStep = -1;
		int entryPosition = getEntryPosition(marble.getColour());

		if (pos != -1) { 

			if (steps == -4) {
				for (int i = 0; i <= 4; i++) {
					int index = (pos - i + track.size()) % track.size(); 
					path.add(track.get(index));
				}
			} else {
				for (int i = 0; i <= steps; i++) {
					int index = (pos + i) % track.size();
					Cell currentCell = track.get(index);

					if (currentCell.getCellType() == CellType.ENTRY && !enteredSafeZone && index == entryPosition) {

						enteredSafeZone = true;
						zoneStep = i;

						int remainingSteps = steps - zoneStep;
						ArrayList<Cell> safeZoneCells = getSafeZone(marble.getColour());

						if (remainingSteps > safeZoneCells.size()) {
							throw new IllegalMovementException("Steps out of safe zone coming from track");
						}
						path.add(currentCell);

						continue; 
					}

					if (enteredSafeZone) {
						int safeZoneIndex = i - zoneStep - 1;
						path.add(getSafeZone(marble.getColour()).get(safeZoneIndex));
					} else {
						path.add(currentCell);
					}
				}
			}

		} else {

			ArrayList<Cell> safeZoneCells = getSafeZone(marble.getColour());
			int posInSafeZone = getPositionInPath(safeZoneCells, marble);

			if (posInSafeZone == -1) {
				throw new IllegalMovementException("Neither in track nor safe zone");
			}

			if (posInSafeZone + steps >= safeZoneCells.size()) {
				throw new IllegalMovementException("Steps out of safe zone");
			}

			for (int i = 0; i <= steps; i++) {
				path.add(safeZoneCells.get(posInSafeZone + i));
			}
		}

		return path;
	}



	private void validatePath(Marble marble, ArrayList<Cell> fullPath, boolean destroy) throws IllegalMovementException {
		if (fullPath.isEmpty()) {
			throw new IllegalMovementException("Path cannot be empty");
		}
		int marbleCount = 0;
		boolean firstIteration = true; 

		int c =0;
		for (Cell cell : fullPath) {
			c++;
			if(firstIteration){
				firstIteration = false;
				continue;
			}

			Marble occupying = cell.getMarble();
			if (occupying == null) continue;

			marbleCount++;
			if (occupying.getColour() == gameManager.getActivePlayerColour() && !destroy) {
				throw new IllegalMovementException("Cannot bypass or destroy your own marble");

			}


			if (marbleCount > 1 && !destroy) {
				throw new IllegalMovementException("More than one marble in path");
			}

			if (cell.getCellType() == CellType.ENTRY && getPositionInPath(track, occupying) == getEntryPosition(occupying.getColour()) && !destroy ) {
				if(c + 1 < fullPath.size() && fullPath.get(c+1).getCellType() == CellType.NORMAL && fullPath.get(c+1).getMarble() != null){

				}else{
					throw new IllegalMovementException("Cannot enter safe zone with any marble stationed at safe zone entry");
				}
				marbleCount--;
			}

			if (cell.getCellType() == CellType.BASE && getPositionInPath(track, occupying) == getBasePosition(occupying.getColour())) {
				throw new IllegalMovementException("Cannot bypass any marble stationed in its base cell");
			}

			if (cell.getCellType() == CellType.SAFE) {
				throw new IllegalMovementException("Safe zone cell that holds a marble is included in path");
			}
		}

	}









	private void move(Marble marble, ArrayList<Cell> fullPath, boolean destroy) throws IllegalDestroyException{
		Cell currentCell = fullPath.get(0);
		Cell targetCell = fullPath.get(fullPath.size() - 1);
		if(destroy){
			for(int i =0; i<fullPath.size(); i++){
				if(fullPath.get(i).getMarble() != null && fullPath.get(i).getMarble().getColour() != marble.getColour()){
					fullPath.get(i).setMarble(null);
				}
			}

		}
		currentCell.setMarble(null);
		targetCell.setMarble(null);
		if(targetCell.isTrap()){
			targetCell.setTrap(false);
			assignTrapCell();
		}else{
			targetCell.setMarble(marble);
		}

	}



	private void validateSwap(Marble marble_1, Marble marble_2) throws IllegalSwapException{
		if(getPositionInPath(track, marble_1)== -1 && getPositionInPath(track, marble_2) == -1){
			throw new IllegalSwapException("Two marbles are on the same track");
		}
		if(getPositionInPath(track, marble_1) == getBasePosition(marble_1.getColour())){
			throw new IllegalSwapException("Opponent marble is in base cell");
		}
		if(getPositionInPath(track, marble_2) == getBasePosition(marble_2.getColour())){
			throw new IllegalSwapException("Opponent marble is in base cell");
		}
	}




	private void validateDestroy(int positionInPath) throws IllegalDestroyException{
		if(positionInPath == -1){
			throw new IllegalDestroyException("Marble not on path");
		}else if(track.get(positionInPath).getMarble() != null){
			if(track.get(positionInPath).getCellType() == CellType.BASE && getBasePosition(track.get(positionInPath).getMarble().getColour()) == positionInPath){
				throw new IllegalDestroyException("Marble is in its base cell");
			}
		}
	}





	public int getSplitDistance() {
		return splitDistance;
	}
	public void setSplitDistance(int splitDistance) {
		this.splitDistance = splitDistance;
	}
	public ArrayList<Cell> getTrack() {
		return track;
	}
	public ArrayList<SafeZone> getSafeZones() {
		return safeZones;
	} 
	// 10. 
	private void validateFielding(Cell occupiedBaseCell) throws CannotFieldException {
		Colour currentPlayerColour = gameManager.getActivePlayerColour();

		if (occupiedBaseCell != null && occupiedBaseCell.getMarble() != null && occupiedBaseCell.getMarble().getColour() == currentPlayerColour) {
			throw new CannotFieldException("Cannot field - a marble of the same color is already in the base cell");
		}
	}
	// 11. Saving validation
	private void validateSaving(int positionInSafeZone, int positionOnTrack) throws InvalidMarbleException {
		if (positionInSafeZone >= 0) {
			throw new InvalidMarbleException("Marble is already in safe zone");
		}
		if (positionOnTrack < 0) {
			throw new InvalidMarbleException("Marble is not on the track");
		}
	}

	// 12. Move with destruction option
	public void moveBy(Marble marble, int steps, boolean destroy) throws IllegalMovementException, IllegalDestroyException {

		ArrayList<Cell> path = validateSteps(marble, steps);
		validatePath(marble, path, destroy);
		move(marble, path, destroy);

		if (destroy) {
			for (Cell cell : path) {
				if (cell.getMarble() != null && cell.getMarble() != marble) {
					destroyMarble(cell.getMarble());
				}
			}
		}
	}

	// 13. Swap marbles
	public void swap(Marble marble1, Marble marble2) throws IllegalSwapException {
		validateSwap(marble1, marble2);

		Cell cell1 = findCellWithMarble(marble1);
		Cell cell2 = findCellWithMarble(marble2);

		cell1.setMarble(marble2);
		cell2.setMarble(marble1);
	}

	// 14. Destroy marble
	public void destroyMarble(Marble marble) throws IllegalDestroyException {
		Cell currentCell = findCellWithMarble(marble);
		if (currentCell == null) {
			throw new IllegalDestroyException("Marble not found on board");
		}


		int position = getPositionInPath(
				currentCell.getCellType() == CellType.NORMAL ? track : getSafeZone(marble.getColour()), 
						marble
				);
		validateDestroy(position);


		currentCell.setMarble(null);
		gameManager.sendHome(marble);
	}

	// 15. Send to base with destruction
	public void sendToBase(Marble marble) throws CannotFieldException, IllegalDestroyException {
		int basePos = getBasePosition(marble.getColour());
		Cell baseCell = track.get(basePos);

		validateFielding(baseCell);

		if (baseCell.getMarble() != null) {
			destroyMarble(baseCell.getMarble());
		}

		Cell currentCell = findCellWithMarble(marble);
		currentCell.setMarble(null);
		baseCell.setMarble(marble);
	}

	// 16. Send to safe zone
	public void sendToSafe(Marble marble) throws InvalidMarbleException {
		ArrayList<Cell> safeZone = getSafeZone(marble.getColour());
		int safePos = getPositionInPath(safeZone, marble);
		int trackPos = getPositionInPath(track, marble);

		validateSaving(safePos, trackPos);

		for (Cell cell : safeZone) {
			if (cell.getMarble() == null) {
				Cell currentCell = findCellWithMarble(marble);
				currentCell.setMarble(null);
				cell.setMarble(marble);
				return;
			}
		}
		throw new InvalidMarbleException("No available space in safe zone");
	}


	public ArrayList<Marble> getActionableMarbles() {
		ArrayList<Marble> actionable = new ArrayList<Marble>();

		for (Cell cell : track) {
			if (cell.getMarble() != null && cell.getMarble().getColour() == gameManager.getActivePlayerColour()) {
				actionable.add(cell.getMarble());
			}
		}

		for (SafeZone zone : safeZones) {
			if (zone.getColour() == gameManager.getActivePlayerColour()) {
				for (Cell cell : zone.getCells()) {
					if (cell.getMarble() != null) {
						actionable.add(cell.getMarble());
					}
				}
			}
		}

		return actionable;
	}

	private Cell findCellWithMarble(Marble marble) {
		for (Cell cell : track) {
			if (marble.equals(cell.getMarble())) {
				return cell;
			}
		}
		for (SafeZone zone : safeZones) {
			for (Cell cell : zone.getCells()) {
				if (marble.equals(cell.getMarble())) {
					return cell;
				}
			}
		}
		return null;
	}
}
