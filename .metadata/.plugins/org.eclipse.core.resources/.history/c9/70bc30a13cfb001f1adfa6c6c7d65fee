package model.card;

import java.io.*;
import java.util.*;

import model.card.standard.*;
import model.card.wild.*;
import engine.GameManager;
import engine.board.BoardManager;

public class Deck {

    private static final String CARDS_FILE = "Cards.csv";
    private static ArrayList<Card> cardsPool = new ArrayList<>(102);

    public static void loadCardPool(BoardManager boardManager, GameManager gameManager) throws IOException {
        cardsPool = new ArrayList<>();
        BufferedReader reader = null;

        try {
            reader = new BufferedReader(new FileReader(CARDS_FILE));
            String line;

            while ((line = reader.readLine()) != null) {
                String[] row = line.split(",");
                int code = Integer.parseInt(row[0].trim());
                int frequency = Integer.parseInt(row[1].trim());
                String name = row[2].trim();
                String description = row[3].trim();
                Card card = null;

                switch (code) {
                    case 1:
                        card = new Ace(name, description, Suit.valueOf(row[5].trim()), boardManager, gameManager);
                        break;
                    case 4:
                        card = new Four(name, description, Suit.valueOf(row[5].trim()), boardManager, gameManager);
                        break;
                    case 5:
                        card = new Five(name, description, Suit.valueOf(row[5].trim()), boardManager, gameManager);
                        break;
                    case 7:
                        card = new Seven(name, description, Suit.valueOf(row[5].trim()), boardManager, gameManager);
                        break;
                    case 10:
                        card = new Ten(name, description, Suit.valueOf(row[5].trim()), boardManager, gameManager);
                        break;
                    case 11:
                        card = new Jack(name, description, Suit.valueOf(row[5].trim()), boardManager, gameManager);
                        break;
                    case 12:
                        card = new Queen(name, description, Suit.valueOf(row[5].trim()), boardManager, gameManager);
                        break;
                    case 13:
                        card = new King(name, description, Suit.valueOf(row[5].trim()), boardManager, gameManager);
                        break;
                    case 14:
                        card = new Burner(name, description, boardManager, gameManager);
                        break;
                    case 15:
                        card = new Saver(name, description, boardManager, gameManager);
                        break;
                    default:
                        int rank = Integer.parseInt(row[4].trim());
                        card = new Standard(name, description, rank, Suit.valueOf(row[5].trim()), boardManager, gameManager);
                        break;
                }
                
                for (int i = 0; i < frequency; i++) {
                    cardsPool.add(card);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (reader != null) {
                reader.close();
            }
        }
    }

    public static ArrayList<Card> drawCards() {
        Collections.shuffle(cardsPool);
        ArrayList<Card> drawnCards = new ArrayList<>(4);
        for (int i = 0; i < 4 && !cardsPool.isEmpty(); i++) {
            drawnCards.add(cardsPool.remove(0));
        }
        return drawnCards;
    }
}