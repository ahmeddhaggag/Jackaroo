package view;

import engine.board.Cell;
import engine.board.CellType;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Ellipse;
import javafx.scene.shape.Polygon;

/**
 * A custom view for displaying a game cell with a non-rectangular shape
 * similar to the one depicted in the PDF.
 */
public class CellView extends Pane {
    private Cell cell;         // Reference to the model cell
    private Ellipse cellShape; // The custom shape representing the cell

    public CellView(Cell cell) {
        this.cell = cell;
        // Create a custom shape. Adjust the points to match your design.
        cellShape = createCellShape();
        getChildren().add(cellShape);
        // Set a preferred size (you may adjust as necessary)
        setPrefSize(20, 20);
        // Update the appearance based on the model cell
        updateView();
    }
    
    /**
     * Create a polygon shape representing the cell.
     * In this example, we create a trapezoid-like shape.
     */
    private Ellipse createCellShape() {
        // Create an ellipse to represent an oval.
        // The constructor parameters are:
        // centerX, centerY, radiusX (half the width) and radiusY (half the height)
        Ellipse ellipse = new Ellipse(5, 5, 5, 5);
        ellipse.setStroke(Color.BLACK);
        ellipse.setFill(Color.WHITE); // Default fill color
        return ellipse;
    }

    
    /**
     * Update the visual appearance of the cell view based on its state in the model.
     */
    public void updateView() {
        if (cell.isTrap()) {
            cellShape.setFill(Color.LIGHTCORAL);  // Mark trap cells differently
        } else if(cell.getCellType() == CellType.ENTRY){
        	cellShape.setFill(Color.GREEN);
        }
        else {
            cellShape.setFill(Color.WHITE);
        }
        // You can add additional visual cues hereâ€”for example, if the cell contains a marble,
        // you might want to change the color or add an overlay shape.
        if (cell.getMarble() != null) {
            // For instance, change the fill or add a circle to indicate a marble is present.
            // cellShape.setFill(Color.LIGHTBLUE);
        }
    }
    
    /**
     * Returns the model cell linked to this view.
     */
    public Cell getCell() {
        return cell;
    }
    public void setCell(Cell cell) {
        this.cell = cell;
    }
    
    
    
}

