package engine.board;
import java.util.*;
import engine.GameManager;
import exception.IllegalDestroyException;
import exception.IllegalMovementException;
import model.Colour;
import model.player.Marble;

import java.util.ArrayList;
import java.util.Random;

import engine.GameManager;
import model.Colour;

public class Board implements BoardManager {
	private final GameManager gameManager;
	private final ArrayList<Cell> track;
	private final ArrayList<SafeZone> safeZones;
	private int splitDistance;


	public Board(ArrayList<Colour> colourOrder, GameManager gameManager){
		this.gameManager = gameManager;
		this.track = new ArrayList<Cell>(100);
		this.safeZones = new ArrayList<SafeZone>(4);
		for(int i =0; i<100; i++){
			if( i==0 || i == 25 || i== 50 || i == 75){
				track.add(new Cell(CellType.BASE));
			}else if( i == 23 || i == 48 || i == 73 || i == 98){
				track.add(new Cell(CellType.ENTRY));
			}else {
				track.add(new Cell(CellType.NORMAL));
			}
		}
		splitDistance = 3;
		safeZones.add(new SafeZone(colourOrder.get(0)));
		safeZones.add(new SafeZone(colourOrder.get(1)));
		safeZones.add(new SafeZone(colourOrder.get(2)));
		safeZones.add(new SafeZone(colourOrder.get(3)));
		for(int i =0; i<8; i++){
			assignTrapCell();
		}

	}


	private void assignTrapCell(){
		Random rand = new Random();
		int index;

		while(true){
			index = rand.nextInt(100);
			if(!track.get(index).isTrap() && track.get(index).getCellType() == CellType.NORMAL){
				track.get(index).setTrap(true);
				break;
			}

		}

	}


	private ArrayList<Cell> getSafeZone(Colour colour){
		ArrayList<Cell> arr = null;
		for(int i =0; i<4; i++){
			if(safeZones.get(i).getColour() == colour ){
				arr = safeZones.get(i).getCells();
				break;
			}
		}
		return arr;

	}

	private int getPositionInPath(ArrayList<Cell> path, Marble marble){
		int result = -1;
		for(int i =0; i<path.size(); i++){
			if(path.get(i).getMarble() == marble){
				result = i;
				break;
			}
		}

		return result;
	}

	private int getBasePosition(Colour colour){
		int result = -1;
		for(int i =0; i<4; i++){
			if(safeZones.get(i).getColour() == colour){
				result = result + 1 + 25*i;
				break;
			}
		}


		return result;
	}

	private int getEntryPosition(Colour colour){
		int result = -1;
		for(int i =0; i<4; i++){
			if(safeZones.get(i).getColour() == colour){
				result = result -1 + 25*i;
				if(result == -2){
					result = 98;
				}
				break;
			}
		}
		return result;

	}


	private ArrayList<Cell> validateSteps(Marble marble, int steps) throws IllegalMovementException{
		ArrayList<Cell> path = new ArrayList<Cell>();
		int pos = -1;
		int zone = -1;
		int zoneStep = -1;
		boolean flag = false;
		if(getPositionInPath(track, marble) != -1){
			pos = getPositionInPath(track, marble);
			if(steps == 4){
				for(int i =0; i<4; i++){
					path.add(track.get(pos - i));
				}
			}
			else if(steps == 5){
				if(pos + steps > 99){
					throw new IllegalMovementException();
				}
				for(int i =0; i<5; i++){
					path.add(track.get(pos + i));
				}
			}else{
				if(pos + steps > 99){
					throw new IllegalMovementException();
				}
				for(int i =0; i<steps; i++){
					if((track.get(pos + steps).getCellType() == CellType.ENTRY)){
						flag = true;
						zone = (pos + steps)/3;
						zoneStep = i;
						if(steps - zoneStep - 1 > 4){
							throw new IllegalMovementException();
						}
					}
					if(flag){
						path.add(safeZones.get(zone).getCells().get(i - zoneStep));
					}
					else{
						if(pos + i > 99){
							path.add(track.get(pos + i - 100));
						}else
							path.add(track.get(pos + i));
					}
				}

			}

		}else if(getPositionInPath(getSafeZone(marble.getColour()), marble) != -1){
			if(steps + pos >= 4){
				throw new IllegalMovementException();
			}else{
				for(int i =0; i < steps; i++){
					path.add(getSafeZone(marble.getColour()).get(i));
				}
			}
		}


		return path;
	}




	private void validatePath(Marble marble, ArrayList<Cell> fullPath, boolean destroy) throws IllegalMovementException{

		if(destroy){


		}else{
			int marbleNo = 0;

			for(int i =0; i< fullPath.size(); i++){
				if(fullPath.get(i).getMarble() != null){
					if(marble.getColour() == fullPath.get(i).getMarble().getColour()){
						throw new IllegalMovementException("Cannot bypass or destroy your own marble");
					}else{
						marbleNo++;
						if(marbleNo > 1){
							throw new IllegalMovementException("More than one marble in path");
						}
						if(fullPath.get(i).getCellType() == CellType.ENTRY && getPositionInPath(track, fullPath.get(i).getMarble()) == getEntryPosition(marble.getColour())){
							throw new IllegalMovementException("Cannot enter safe zone with any marble stationed at safe zone entry");
						}
						if(fullPath.get(i).getCellType() == CellType.BASE && getPositionInPath(track, fullPath.get(i).getMarble()) == getBasePosition(marble.getColour())){
							throw new IllegalMovementException("Cannot bypass any marble stationed in its base cell");
						}
					}


				}
			}

		}

	}

	private void move(Marble marble, ArrayList<Cell> fullPath, boolean destroy) throws IllegalDestroyException{
		Cell currentCell = fullPath.get(0);
		Cell targetCell = fullPath.get(fullPath.size() - 1);
		if(destroy){
			for(int i =0; i<fullPath.size(); i++){
				if(fullPath.get(i).getMarble() != null){
					fullPath.get(i).setMarble(null);
				}
			}

		}
		currentCell.setMarble(null);
		targetCell.setMarble(null);
		if(targetCell.isTrap()){
			targetCell.setTrap(false);
			assignTrapCell();
		}else{
			targetCell.setMarble(marble);
		}

	}





	public int getSplitDistance() {
		return splitDistance;
	}
	public void setSplitDistance(int splitDistance) {
		this.splitDistance = splitDistance;
	}
	public ArrayList<Cell> getTrack() {
		return track;
	}
	public ArrayList<SafeZone> getSafeZones() {
		return safeZones;
	}
}
