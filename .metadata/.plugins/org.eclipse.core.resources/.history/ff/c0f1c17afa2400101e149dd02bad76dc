package model.player;

import java.util.ArrayList;

import exception.GameException;
import exception.InvalidCardException;
import exception.InvalidMarbleException;
import model.Colour;
import model.card.Card;

public class Player {
	
	private final String name;
	private final Colour colour;
	private ArrayList<Card> hand;
	private final ArrayList<Marble> marbles;
	private Card selectedCard;
	private final ArrayList<Marble> selectedMarbles;
	private ArrayList<Marble> homeMarble;

	
	
	
	public Player(String name, Colour colour){
		this.name = name;
		this.colour = colour;
		hand = new ArrayList<Card>(4);
		selectedMarbles = new ArrayList<Marble>();
		marbles = new ArrayList<Marble>();
		for(int i =0; i<4; i++){
			marbles.add(new Marble(colour));	
		}
		selectedCard = null;
	}
	
	public String getName() {
		return name;
	}
	public Colour getColour() {
		return colour;
	}
	public ArrayList<Card> getHand() {
		return hand;
	}
	public void setHand(ArrayList<Card> hand) {
		this.hand = hand;
	}
	
	public ArrayList<Marble> getMarbles() {
		return marbles;
	}
	
	public Card getSelectedCard() {
		return selectedCard;
	}
	public void regainMarble(Marble marble){
		if (marble!=null)
			homeMarble.add(marble);
	}

	public ArrayList<Marble> getSelectedMarbles() {
		return selectedMarbles;
	}

	public void setSelectedCard(Card selectedCard) {
		this.selectedCard = selectedCard;
	}
	
	
	
	public void selectCard(Card card) throws InvalidCardException{
		if ((card==null) || ! hand.contains(card)){
			throw new InvalidCardException("card not in player's hand");
		}
	}
	public void selectMarble(Marble marble) throws InvalidMarbleException{
		if(selectedMarbles.size()>=2){
			throw new InvalidMarbleException("cannot select more than two marbles");
			
		}
		if(marble!=null)
			selectedMarbles.add(marble);
	}
	public void deselectAll(){
		selectedCard =null;
		selectedMarbles.clear();
		
	}
	public void play() throws GameException{
		if(selectedCard == null)
			throw new InvalidCardException("no card selected");
	try{
		if(!selectedCard.validateMarbleCount(selectedMarbles)){
			throw new InvalidCardException("Invalid number of marbles for this card");
		}
		if(!selectedCard.validateMarbleColors(selectedMarbles)){
			throw new InvalidCardException("Invalid number of marble colours for this card");
		}
	}
	catch(Exception e){
		throw new InvalidCardException("Validation failed :"+ e.getMessage());
		}

		
}

	public ArrayList<Marble> getHomeMarble() {
		return homeMarble;
	}

	public void setHomeMarble(ArrayList<Marble> homeMarble) {
		this.homeMarble = homeMarble;
	}

}
