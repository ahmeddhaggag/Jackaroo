package model.card;

import java.util.ArrayList;

import engine.GameManager;
import engine.board.BoardManager;
import model.card.standard.Ace;
import model.card.standard.Five;
import model.card.standard.Four;
import model.card.standard.Jack;
import model.card.standard.King;
import model.card.standard.Queen;
import model.card.standard.Seven;
import model.card.standard.Standard;
import model.card.standard.Suit;
import model.card.standard.Ten;
import model.card.wild.Burner;
import model.card.wild.Saver;

import java.io.*;
import java.util.*;

public class Deck {
	private static final String CARDS_FILE = "Cards.csv";
	private static ArrayList<Card> cardsPool;

	public static void loadCardPool(BoardManager boardManager, GameManager gameManager) throws IOException {
		BufferedReader reader = null;
		String line = "";
		cardsPool = new ArrayList<>();
		try {
			reader = new BufferedReader(new FileReader(CARDS_FILE));

			while ((line = reader.readLine()) != null) {
				String[] row = line.split(",");

				int code = Integer.parseInt(row[0].trim());
				int frequency = Integer.parseInt(row[1].trim());
				String name = row[2].trim();
				String description = row[3].trim();
				int rank = -1;
				Suit suit = null;
				if(row.length == 6){
					rank =  Integer.parseInt(row[4].trim());
					suit =  Suit.valueOf(row[5].trim());
				}

				for (int i = 0; i < frequency; i++) {
					Card card;
					switch (code) {
					case 0:
						card = new Standard(name, description, rank, suit, boardManager, gameManager);
						break;
					case 1:
						card = new Ace(name, description, suit, boardManager, gameManager);
						break;
					case 4:
						card = new Four(name, description, suit, boardManager, gameManager);
						break;
					case 5:
						card = new Five(name, description, suit, boardManager, gameManager);
						break;
					case 7:
						card = new Seven(name, description, suit, boardManager, gameManager);
						break;
					case 10:
						card = new Ten(name, description, suit, boardManager, gameManager);
						break;
					case 11:
						card = new Jack(name, description, suit, boardManager, gameManager);
						break;
					case 12:
						card = new Queen(name, description, suit, boardManager, gameManager);
						break;
					case 13:
						card = new King(name, description, suit, boardManager, gameManager);
						break;
					case 14:
						card = new Burner(name, description, boardManager, gameManager);
						break;
					case 15:
						card = new Saver(name, description, boardManager, gameManager);
						break;
					default:
						if (rank != -1 && suit != null) {
							card = new Standard(name, description, rank, suit, boardManager, gameManager);
						} else {
							throw new IllegalArgumentException("Invalid card data: " + line);
						}
						break;
					}

					cardsPool.add(card);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			reader.close();
		}
	}

	public static ArrayList<Card> drawCards() {
		Collections.shuffle(cardsPool);
		ArrayList<Card> drawnCards = new ArrayList<>(4);
		for (int i = 0; i < 4 && !cardsPool.isEmpty(); i++) {
			drawnCards.add(cardsPool.remove(0));
		}
		return drawnCards;
	} 


}

