<?xml version="1.0" encoding="UTF-8"?><testrun name="test" project="JackarooGame" tests="252" started="252" failures="8" errors="10" ignored="0">
  <testsuite name="test.Milestone1PublicTests" time="0.297">
    <testcase name="testBoardInstanceVariablehSafeZonesOfTypeArrayListOfSafeZone" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardFileInDeckOfType" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBurnerCardConstructorInitialization" classname="test.Milestone1PublicTests" time="0.015"/>
    <testcase name="testConstructorWild" classname="test.Milestone1PublicTests" time="0.0">
      <failure>java.lang.AssertionError: Missing constructor with String and String and BoardManager and GameManager  parameters in Wild class.&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at org.junit.Assert.assertFalse(Assert.java:64)&#13;
	at test.Milestone1PublicTests.testConstructorExists(Milestone1PublicTests.java:5217)&#13;
	at test.Milestone1PublicTests.testConstructorWild(Milestone1PublicTests.java:899)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="testConstructorSplitOutOfRangeException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardInstanceVariableNameIsPresent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testClassIsAbstractGameException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardInstanceVariableTrackIsFinal" classname="test.Milestone1PublicTests" time="0.016"/>
    <testcase name="testPlayerInstanceVariableMarblesGetterLogic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorIllegalSwapException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariableTurnNOGetter" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testInvalidMarbleExceptionConstructorInitializationCheck" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testClassFiveExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCurrentPlayerIndexInGameType" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGetterForInstanceVariableSuitDoesNotExistInWeaponSubClasses" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariableBoardNoSetter" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testIllegalMovementExceptionConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariableBoardIsFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testAssignTrapExistanceInClassBoard" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorInvalidCardException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariableFirePitIsPrivate" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariableFirePitPresent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testTrapInCellSetterLogic2" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorCannotDiscardException" classname="test.Milestone1PublicTests" time="0.016"/>
    <testcase name="testCellTypeEnumValues" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testKingCardConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGetterLogicForDescriptionInClassStandard" classname="test.Milestone1PublicTests" time="0.0">
      <error>java.lang.NoSuchMethodException: model.card.standard.Standard.getDescription()&#13;
	at java.lang.Class.getMethod(Unknown Source)&#13;
	at test.Milestone1PublicTests.testGetterLogic(Milestone1PublicTests.java:5104)&#13;
	at test.Milestone1PublicTests.testGetterLogicForDescriptionInClassStandard(Milestone1PublicTests.java:2661)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testBoardInstanceVariableTrackGetterLogic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorSevenExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testColourEnumValues" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardConstructorInitializationSplittingDisctanceCorrect" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testInvalidCardExceptionConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testDrawCardsInDeckShufflesCards" classname="test.Milestone1PublicTests" time="0.015"/>
    <testcase name="testCellInstanceVariableCellTypeIsPrivate" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableNameGetterLogic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testDrawCardsInDeckReturnsFourCards" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testMarbleConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testMarbleInstanceVariableColourIsPrivate" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardsPoolInDeckOfType" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardsFileInDeckIsStatic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSafeZoneConstructorInitializationColour" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariableFirePitGetterLogic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardInstanceVariableSplitDistanceOfTypeInt" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSafeZoneInstanceVariableColourNoSetter" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorJackExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorSaver" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSaverCardExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameConstructorInitializationFirePit" classname="test.Milestone1PublicTests" time="0.016"/>
    <testcase name="testGameClassImplementsGameManagerInterface" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableHandGetterExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardInstanceVariableNameisFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testClassIsSubclassGameException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testLoadCardPoolInDeckisStatic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariablePlayersIsFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorCannotFieldException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardInstanceVariableSuitiFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testColourValues" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testLoadCardPoolInDeckReadingCSVLoadingStandardCards1Rank" classname="test.Milestone1PublicTests" time="0.0">
      <error>java.lang.IndexOutOfBoundsException: Index: 0, Size: 0&#13;
	at java.util.ArrayList.rangeCheck(Unknown Source)&#13;
	at java.util.ArrayList.get(Unknown Source)&#13;
	at test.Milestone1PublicTests.testLoadCardPoolInDeckReadingCSVLoadingStandardCards1Rank(Milestone1PublicTests.java:1586)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testTestingfiveIsSubClassOfStandrad" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testEmptyConstructorIllegalDestroyException" classname="test.Milestone1PublicTests" time="0.016"/>
    <testcase name="testSafeZoneInstanceVariableCellsNoSetter" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableMarblesGetterExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testQueenCardConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariableTurnIsPrivate" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testEmptyConstructorActionException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSetterForInstanceVariableRankDoesNotExistInAnyClass" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSafeZoneInstanceVariableColourGetterLogic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCannotDiscardExceptionConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardInstanceVariableDescriptionisFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSaverIsSubClassOfWild" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorAceExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testTrapInCellSetterLogic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testWildCardIsAnAbstractClass" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSafeZoneInstanceVariableCellsIsPrivate" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCellInstanceVariableTrapIsPrivate" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGetterLogicForSuiteInClassStandard" classname="test.Milestone1PublicTests" time="0.015"/>
    <testcase name="testFiveCardConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testClassIsSubclassActionException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorBurner" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSafeZoneConstructorInitializationCells" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCellTypeInCellSetterExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testEmptyConstructorSplitOutOfRangeException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testMarbleInstanceVariableColourIsFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariableCurrentPlayerIndexNoSetter" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardConstructorInitializationGameManagerCorrect" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testLoadCardPoolInDeckThrowsIOException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariableBoardIsPrivate" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableColourSetterIsAbsent" classname="test.Milestone1PublicTests" time="0.016"/>
    <testcase name="testGameConstructorInitializationPlayersColours" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardInstanceVariableSafeZonesSetterIsAbsent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerConstructorInitializationSelectedMarblesCorrect" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testAssignTrapIsPrivateInClassBoard" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameConstructorInitializationPlayersNames" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableSelectedCardOfTypeCard" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariableCurrentPlayerIndexIsFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardInstanceVariableTrackSetterIsAbsent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardsPoolInDeckGetterIsAbsent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCellConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardInstanceVariablBoardManagerIsPresent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameConstructorInitializationHandPlayers" classname="test.Milestone1PublicTests" time="0.015">
      <failure>java.lang.AssertionError: Player's hand should countain exactly 4 cards expected:&lt;4&gt; but was:&lt;0&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at test.Milestone1PublicTests.testGameConstructorInitializationHandPlayers(Milestone1PublicTests.java:1992)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="testTenCardConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorKingExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testLoadCardPoolInDeckReadingCSVLoadingMixCards" classname="test.Milestone1PublicTests" time="0.0">
      <error>java.lang.IndexOutOfBoundsException: Index: 0, Size: 0&#13;
	at java.util.ArrayList.rangeCheck(Unknown Source)&#13;
	at java.util.ArrayList.get(Unknown Source)&#13;
	at test.Milestone1PublicTests.testLoadCardPoolInDeckReadingCSVLoadingMixCards(Milestone1PublicTests.java:1324)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testEmptyConstructorCannotDiscardException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorStandardExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCPUInstanceVariableBoardManagerIsPresent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSafeZoneInstanceVariableCellsPresent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableSelectedCardSetterIsAbsent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardInstanceVariableSplitDistanceSetterLogic" classname="test.Milestone1PublicTests" time="0.016"/>
    <testcase name="testGameManagerIsAnInterface" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testIllegalSwapExceptionConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testDescriptionGetter" classname="test.Milestone1PublicTests" time="0.0">
      <failure>java.lang.AssertionError: The "description" instance variable in class Card is a READ variable.&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at test.Milestone1PublicTests.testGetterMethodExistsInClass(Milestone1PublicTests.java:5065)&#13;
	at test.Milestone1PublicTests.testDescriptionGetter(Milestone1PublicTests.java:2573)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="testBoardInstanceVariableSplitDistanceGetterLogic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testClassIsSubclassIllegalSwapException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGetterLogicForNameInClassStandard" classname="test.Milestone1PublicTests" time="0.0">
      <error>java.lang.NoSuchMethodException: model.card.standard.Standard.getName()&#13;
	at java.lang.Class.getMethod(Unknown Source)&#13;
	at test.Milestone1PublicTests.testGetterLogic(Milestone1PublicTests.java:5104)&#13;
	at test.Milestone1PublicTests.testGetterLogicForNameInClassStandard(Milestone1PublicTests.java:2623)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testBoardInstanceVariableSplitDistanceGetterExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testStandardCardRankModifiers1" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardClassExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameConstructorInitializationBoardMangers" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableSelectedMarblesGetterIsAbsent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableMarblesIsPresent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testEmptyConstructorIllegalMovementException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableMarblesIsPrivate" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testClassIsSubclassIllegalMovementException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableColourIsFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testTestingsevenIsSubClassOfStandrad" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testLoadCardPoolInDeckReadingCSVLoadingMixCards2" classname="test.Milestone1PublicTests" time="0.016">
      <error>java.lang.IndexOutOfBoundsException: Index: 0, Size: 0&#13;
	at java.util.ArrayList.rangeCheck(Unknown Source)&#13;
	at java.util.ArrayList.get(Unknown Source)&#13;
	at test.Milestone1PublicTests.testLoadCardPoolInDeckReadingCSVLoadingMixCards2(Milestone1PublicTests.java:1386)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testSetterForInstanceVariableNameDoesNotExistInAnyClass" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableColourIsPresent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testClassIsSubclassInvalidCardException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorGameException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerConstructorInitializationMarblesCorrect" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testNameCardsLoadCardPoolInDeckReadingCSVLoadingWildCards" classname="test.Milestone1PublicTests" time="0.0">
      <error>java.lang.IndexOutOfBoundsException: Index: 0, Size: 0&#13;
	at java.util.ArrayList.rangeCheck(Unknown Source)&#13;
	at java.util.ArrayList.get(Unknown Source)&#13;
	at test.Milestone1PublicTests.testNameCardsLoadCardPoolInDeckReadingCSVLoadingWildCards(Milestone1PublicTests.java:1145)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testClassBurnerExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testRankGetter" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCPUConstructorExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSafeZoneInstanceVariableColourIsFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardsFileInDeckIsFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardsPoolInDeckIsPrivate" classname="test.Milestone1PublicTests" time="0.015"/>
    <testcase name="testGameInstanceVariableBoardGetterExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardConstructorInitializationTrackCorrect" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testClassTenExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableNameSetterIsAbsent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testStandardCardConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardInstanceVariableGameManagerOfTypeGameManager" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCellInstanceVariableCellTypeGetterLogic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testEmptyConstructorGameException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCPUInstanceVariableBoardManagerIsFinal" classname="test.Milestone1PublicTests" time="0.0">
      <failure>java.lang.AssertionError: boardManager should be final&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at test.Milestone1PublicTests.testInstanceVariableIsFinal(Milestone1PublicTests.java:5026)&#13;
	at test.Milestone1PublicTests.testCPUInstanceVariableBoardManagerIsFinal(Milestone1PublicTests.java:3231)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="testCodeCardsLoadCardPoolInDeckReadingCSVLoadingWildCards" classname="test.Milestone1PublicTests" time="0.0">
      <error>java.lang.IndexOutOfBoundsException: Index: 0, Size: 0&#13;
	at java.util.ArrayList.rangeCheck(Unknown Source)&#13;
	at java.util.ArrayList.get(Unknown Source)&#13;
	at test.Milestone1PublicTests.testCodeCardsLoadCardPoolInDeckReadingCSVLoadingWildCards(Milestone1PublicTests.java:1200)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testCardDescriptionModifiers4" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testDrawCardsInDeckisStatic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCellInstanceVariableMarbleGetterLogic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testgetSplitDistanceInBoardManagerInterface" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCannotDiscardExceptionConstructorInitializationCheck" classname="test.Milestone1PublicTests" time="0.016"/>
    <testcase name="testSafeZoneInstanceVariableColourGetterExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testMarbleInCellSetterLogic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testTypeOfMarbleInCell" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariableCurrentPlayerIndexNOGetter" classname="test.Milestone1PublicTests" time="0.0">
      <failure>java.lang.AssertionError: The "currentPlayerIndex" instance variable in class Game is not a READ variable.&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at org.junit.Assert.assertFalse(Assert.java:64)&#13;
	at test.Milestone1PublicTests.testGetterMethodExistsInClass(Milestone1PublicTests.java:5070)&#13;
	at test.Milestone1PublicTests.testGameInstanceVariableCurrentPlayerIndexNOGetter(Milestone1PublicTests.java:734)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="testGameInstanceVariableTurnPresent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariableFirePitIsFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableSelectedMarblesIsPrivate" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariablePlayersGetterExists" classname="test.Milestone1PublicTests" time="0.0">
      <failure>java.lang.AssertionError: The "players" instance variable in class Game is a READ variable.&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at test.Milestone1PublicTests.testGetterMethodExistsInClass(Milestone1PublicTests.java:5065)&#13;
	at test.Milestone1PublicTests.testGameInstanceVariablePlayersGetterExists(Milestone1PublicTests.java:638)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="testClassIsSubclassCannotFieldException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testIsCardAnAbstractClass" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariablehHandOfTypeArrayListOfCard" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardsFileInDeckExistance" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testTestingJackIsSubClassOfStandrad" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardInstanceVariablehTrackOfTypeArrayListOfCell" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariablePlayersPresent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCannotFieldExceptionConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableSelectedCardGetterLogic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCPUConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableNameIsFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSplitOutOfRangeExceptionConstructorInitializationCheck" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testTrapInCellGetterExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardManagerModifier" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableSelectedMarblesOfTypeArrayList" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariableFirePitNoSetter" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testMarbleInCellSetterExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameConstructorInitializationTurn" classname="test.Milestone1PublicTests" time="0.016"/>
    <testcase name="testBoardConstructorInitializationSafeZonesCorrect" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerConstructorInitializationHandCorrect" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableMarblesOfTypeArrayListOfMarbles" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardInGameType" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariablePlayersGetterLogic" classname="test.Milestone1PublicTests" time="0.0">
      <error>java.lang.NoSuchMethodException: engine.Game.getPlayers()&#13;
	at java.lang.Class.getDeclaredMethod(Unknown Source)&#13;
	at test.Milestone1PublicTests.testGetterMethodLogic(Milestone1PublicTests.java:4830)&#13;
	at test.Milestone1PublicTests.testGameInstanceVariablePlayersGetterLogic(Milestone1PublicTests.java:664)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testClassCardExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testColourInMarbleType" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSafeZoneInstanceVariableCellsGetterExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testLoadCardPoolInDeckReadingCSVLoadingStandardCards1" classname="test.Milestone1PublicTests" time="0.015">
      <error>java.lang.IndexOutOfBoundsException: Index: 0, Size: 0&#13;
	at java.util.ArrayList.rangeCheck(Unknown Source)&#13;
	at java.util.ArrayList.get(Unknown Source)&#13;
	at test.Milestone1PublicTests.testLoadCardPoolInDeckReadingCSVLoadingStandardCards1(Milestone1PublicTests.java:1488)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testLoadCardPoolInDeckReadingCSVLoadingStandardCards2" classname="test.Milestone1PublicTests" time="0.0">
      <error>java.lang.IndexOutOfBoundsException: Index: 0, Size: 0&#13;
	at java.util.ArrayList.rangeCheck(Unknown Source)&#13;
	at java.util.ArrayList.get(Unknown Source)&#13;
	at test.Milestone1PublicTests.testLoadCardPoolInDeckReadingCSVLoadingStandardCards2(Milestone1PublicTests.java:1685)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testPlayerInstanceVariableNameIsPrivate" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testColourInSafeZoneType" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testInvalidMarbleExceptionConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCellConstructorExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardInstanceVariableSafeZonesIsPresent" classname="test.Milestone1PublicTests" time="0.016"/>
    <testcase name="testBoardInstanceVariableSafeZonesIsPrivate" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardInstanceVariableGameManagerGetterIsAbsent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testClassJackExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCellTypeIsEnum" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testTestingQueenIsSubClassOfStandrad" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorfourExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableHandIsPresent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableHandIsPrivate" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardInstanceVariablRankIsPresent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardInstanceVariableGameManagerIsFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testEmptyConstructorInvalidCardException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBurnerIsSubClassOfWild" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testMarbleInstanceVariableColourGetterLogic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableSelectedMarblesIsFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testFrequencyCardsLoadCardPoolInDeckReadingCSVLoadingWildCards" classname="test.Milestone1PublicTests" time="0.0">
      <failure>java.lang.AssertionError: Card Frequency is incorrect, card of name:MarbleBurner should be added with frequency  expected:&lt;20&gt; but was:&lt;0&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:645)&#13;
	at test.Milestone1PublicTests.testFrequencyCardsLoadCardPoolInDeckReadingCSVLoadingWildCards(Milestone1PublicTests.java:1271)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="testCellInstanceVariableMarbleGetterExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariableCurrentPlayerIndexPresent" classname="test.Milestone1PublicTests" time="0.015"/>
    <testcase name="testBoardInstanceVariableSplitDistanceSetterExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardsPoolInDeckIsStatic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testMarbleInstanceVariableColourGetterExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameInstanceVariablePlayersNoSetter" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerConstructorInitialization" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorActionException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCellInstanceVariableTrapPresent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testMarbleInstanceVariableColourNoSetter" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCardsFileInDeckValue" classname="test.Milestone1PublicTests" time="0.0">
      <failure>
        <expected>Cards.csv</expected>
        <actual>../Cards.csv</actual>org.junit.ComparisonFailure: expected:&lt;[]Cards.csv&gt; but was:&lt;[../]Cards.csv&gt;&#13;
	at org.junit.Assert.assertEquals(Assert.java:115)&#13;
	at org.junit.Assert.assertEquals(Assert.java:144)&#13;
	at test.Milestone1PublicTests.testCardsFileInDeckValue(Milestone1PublicTests.java:1010)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)&#13;
	at java.util.concurrent.FutureTask.run(Unknown Source)&#13;
	at java.lang.Thread.run(Unknown Source)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="testFirePitInGameType" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testTypeOfCellTypeInCell" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testClassAceExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardImplementsBoardManager" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCPUSubToPlayer" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSuitGetter" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardInstanceVariableSafeZonesGetterExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGetterForInstanceVariableRankDoesNotExistInWeaponSubClasses" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSuitIsEnum" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableHandSetterLogic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSevenCardConstructorInitialization" classname="test.Milestone1PublicTests" time="0.016"/>
    <testcase name="testCardFileInDeckGetterIsAbsent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardInstanceVariableTrackIsPresent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testBoardInstanceVariableTrackIsPrivate" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGetterForInstanceVariableNameDoesNotExistInWeaponSubClasses" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableHandGetterLogic" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testClassIsAbstractInvalidSelectionException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testDrawCardsInDeckRemovedCardsCards" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testIllegalDestroyExceptionConstructorInitializationCheck" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testWildCardExists" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testPlayerInstanceVariableColourGetterLogicCase1" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testTestingStandardIsSubClassOfCard" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testIllegalSwapExceptionConstructorInitializationCheck" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCellInstanceVariableMarbleIsPrivate" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testGameConstructorInitializationGameMangers" classname="test.Milestone1PublicTests" time="0.016"/>
    <testcase name="testCardsPoolInDeckSetterIsAbsent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testConstructorIllegalDestroyException" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSafeZoneInstanceVariableColourPresent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testCPUInstanceVariableBoardManagerSetterIsAbsent" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testSafeZoneInstanceVariableCellsIsFinal" classname="test.Milestone1PublicTests" time="0.0"/>
    <testcase name="testClassKingExists" classname="test.Milestone1PublicTests" time="0.0"/>
  </testsuite>
</testrun>
